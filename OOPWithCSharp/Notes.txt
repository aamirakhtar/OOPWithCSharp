OOP:-
Object oriented programming/paradiagm, its abot objects and their relationships.

Class: Recepie to make objects.
It contains only properties and methods.

properties: nouns.
functions/methods: verbs.

Object: Is a physical existance of class.

We have some types of relations or Pillars of OOP:-

1-Inheritance: Implicit Posession of properties and methods in child class from parent class. "is a" relation.
	a-Single: one parent one child
	b-Multilevel: Several children of a parent.
	c-Multipath: Several paths of children of a parent. Tree structure.
	d-Multiple: When you have one or more parents of a child. Its not implimentable in programming languages except C++.

2-Encapsulation: Accessibility of the properties and mathods.
To impliment this we use access modifiers:-
a-public: Accessible to every object.
b-private: Cannot be accessed by any object.
c-protected: Only be accessed within heirarchy or family.
d-internal: Can only be accessed within the DLL or Project.
e-protected-internal: 

3-Containment: "has a relation":
	a-Aggregation.
	b-composition.

4-Polymorphism. (Specialization)
5-Abstraction. (Generalization)

Inheritance is interchangeably used by words:-
Extends.
Parent Child relation.
Heirarchy.
Root class is called as Base Class.
Family.


Containment:-
Having an object of another class as property in the current class.
"has a relation".

-It can be used as alternative to inheritance.
-Its loosely coupled but has less code reusability.
-In contrast Inheritance is tighly coupled but has better code reusability.

-Inheritance is tightly coupled bcz changing anything in the parent can lead to crash in children classes.

1-Aggregation.
	When a parent is not dependent upon children for existance.
	When a parent can exists wihtout the children.
	eg: 
	Infotainment system in the car, bcz without the system car can exists.
	
2-Composition:-
	When a parent is dependent upon children for existance.
	When a parent cannot exists without the children.

	eg:
	Without the engine car cannot exists.
	Without Brain human cannot exists.

-Always prefer containment over inheritance.
-Whereever comonalities are clear, "is a relation" is clear and most importantly code reusability is acheived then use inheritance, else
use containment. Thats why in real life projects inheritance and containment both are very important features and are used frequently but containment
always be used mre freqently than inheritance.

Polymorphism:-
Same name but different behaviours.

2 Types:-

1-Dynamic: overriding. Inheritance is mandatory

2-Static: Function overloading. Inheritance is not mandatory
	a-Number of the parameters
	b-Type of the parameters.
	c-Order of the type of the parameters.

Abstraction:-

1-When you(class) dont need to bother about the details of a complex functionality.
2-Its a concept or idea.
3-No object can be created for the abstract class.
SmartPhone (abstract)
	Iphone - Android (abstract)
		Iphone8
			Iphone8s
4-Abstract class can have concrete members but concrete class cannot have contains abstract members.
5-Every "concrete" child of the abstract class has to implement abstract members.

Dot net Framework:-

1-CLR:-
Its a virtual machine component of the dot net framework

Basic CLR elements:-
JIT:-
Pre - JIT
    In Pre-JIT compilation, complete source code is converted into 
native code in a single cycle (i.e. compiles the entire code into 
native code in one stretch)

Econo - JIT
    In Econo-JIT compilation, the compiler compiles only those 
methods that are called at run time.
    After execution of this method the compiled methods are removed 
from memory.

Normal - JIT
    In Normal-JIT compilation, the compiler compiles only those 
methods that are called at run time.
    After executing this method, compiled methods are stored in a 
memory cache.
    Now further calls to compiled methods will execute the methods 
from the memory cache.

	
2-CTS
Common Type System
responsible of managing
Value types:-
1-Instances of value types are allocated on stack.
2-They contain actual values.
3-They are basically Structs, enums.

Reference types:-
1-Instances of ref types are allocated on heap.
2-They contain references.
3-They are basically classes.


3-CLS is a subset of CTS:-
Microsoft has defined CLS which are nothing but guidelines that 
language to follow so that it can communicate with other .NET 
languages in a seamless manner.

CTS and CLS ensures language interoperability


4-.Net Framework Class Library

Assemblies/DLLs/Class Libraries/Project (all are same):-
Its a collection of namespaces.
namespace is the collection of classes.

Solution is the collection of assemblies/projects/dlls/Class Libraries.

//********************************** interface **************************************//

Interface:-

Its a specialized form of abstraction/abstract class.
We call it Contract.

Just like contract Both the parties that are classes means, Parent and the child class agree on all methods/properties given in a parent class.

Technically child class must implement all the parent members.

because Interface has all the members abstract by default.

So all the members of the child class implementing/inheriting interface members, must implement that interface members.

